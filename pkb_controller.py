#!/usr/bin/env python

#testing script

import os
import argparse
import subprocess


def main():
  parser = argparse.ArgumentParser()
  add_args(parser)
  args = parser.parse_args()
  benchmarks = [benchmark for benchmark in args.benchmarks.split(',')]
  print(benchmarks)
  pkb_path = args.pkb_path
  print(pkb_path)

  zone_list = []
  if not args.zone_list:
    zone_list = get_zones()
  else:
    zone_list = [zone for zone in args.zone_list.split(',')]

  # print(zone_list)

  # os.system('./pkb.py --helpmatch=benchmarks')

  if args.all_zone_intraregion is True:
    # run all zones intraregion test
    regions = get_zones_per_region()
    for region in regions.keys():
      count = 0
      for zone1 in regions[region]:
        for zone2 in regions[region][count+1:]:
          if zone1 != zone2:
            print(zone1 + " " + zone2)
            for benchmark in benchmarks:
              cmd = build_command(args, benchmark, zone1, zone2)
              run_benchmark(cmd)
        count = count + 1

  else:
    for zone1 in zone_list:
      for zone2 in zone_list:
        if zone1 != zone2:
          for benchmark in benchmarks:
            cmd = build_command(args, benchmark, zone1, zone2)
            run_benchmark(cmd)

      # network benchmarks from zone1 to zone2

  # results = p.communicate()[0]


def run_benchmark(cmd):
  """[summary]

  [description]
  
  Args:
    cmd: list of command parameters to send to subprocess. 
    This list is generated by build_command()
  """
  print(cmd)
  try:
    p = subprocess.Popen(cmd, stdout=subprocess.PIPE)
    results = p.communicate()[0]
  except:
    print("ERROR: pkb.py not found. Either run this script "
          "from the same directory as pkb.py or "
          "Try setting the --pkb_path flag. Specify the full"
          " path do not use ~")
    exit()


# TODO change how it
# builds pkb command to run
def build_command(args, benchmark, zone1, zone2):
  """Takes parameters and builds command to run perfkitbenchmarker
  
  Args:
    args: command line arguments from argparse
    benchmark: which benchmark to run
    zone1: which zone to use as 1 end of network test
    zone2: which zone to use as other end of network test
  
  Returns:
    command as a list of parameters to run pkb
  """
  cmd = []
  cmd.append(args.pkb_path)

  if args.docker_to_cloud is True:
    cmd.append('--benchmarks=netperf')

  elif benchmark == 'netperf':
    cmd.append('-benchmarks=netperf')

  elif benchmark == 'iperf':
    cmd.append('--benchmarks=iperf')
    cmd.append('--iperf_runtime_in_seconds=' +
               str(args.iperf_runtime_in_seconds))
    cmd.append('--iperf_sending_thread_count' +
               str(args.iperf_sending_thread_count))

  elif benchmark == 'iperf_vpn':
    cmd.append('--benchmarks=iperf_vpn')
    cmd.append('--iperf_vpn_sending_thread_count=' +
               str(args.iperf_vpn_sending_thread_count))
    # cmd.append('--use_vpn=' + args.use_vpn)
    cmd.append('--use_vpn=True')
    cmd.append('--config_override=iperf_vpn.vpn_service.tunnel_count=' +
               str(args.tunnel_count))
    cmd.append('--config_override=iperf_vpn.vm_groups.vm_1.cidr=10.0.1.0/24')

  cmd.append('--machine_type=' + args.machine_type)
  if args.bq_path:
    cmd.append('--bq_path=' + args.bq_path)
  if args.bigquery_table:
    cmd.append('--bigquery_table=' + args.bigquery_table)
  if args.bq_project:
    cmd.append('--bq_project=' + args.bq_project)

  cmd.append('--config_override=iperf.vm_groups.vm_1.vm_spec.GCP.zone=' + zone1)
  cmd.append('--config_override=iperf.vm_groups.vm_2.vm_spec.GCP.zone=' + zone2)

  # cmd.append('--iperf_vpn_sending_thread_count=' + 
  #            args.iperf_vpn_sending_thread_count)
  # cmd.append('--use_vpn=' + args.use_vpn)

  # cmd.append('--config_override=iperf_vpn.vpn_service.tunnel_count=' + 
  #            args.tunnel_count)

  # cmd.append('--config_override=iperf_vpn.vm_groups.vm_1.cidr=10.0.1.0/24')
  # cmd.append('--config_override=iperf_vpn.vm_groups.vm_2.cidr=192.168.1.0/24')


  return cmd

# ./pkb.py --benchmarks=iperf --machine_type=f1-micro 
# --iperf_runtime_in_seconds=10 
# --config_override="iperf.vm_groups.vm_1.vm_spec.GCP.zone=us-east1-b" 
# --config_override="iperf.vm_groups.vm_2.vm_spec.GCP.zone=us-east4-a"

# --project=cloud-performance-tool 
# --benchmarks=iperf_vpn --machine_type=f1-micro 
# --benchmark_config_file=iperf_vpn.yaml


def get_one_zone_per_region():
  all_zones = get_zones()
  zone_list = []


def get_zones_per_region():
  """Gets all zones, divided up by region
  
  Returns:
      Dict: Dictionary where key = region, value = list of zones in region
  """
  all_zones = get_zones()
  regions = {}
  print(all_zones)

  for zone in all_zones:
    if zone[1] in regions:
      regions[zone[1]].append(zone[0])
    else:
      regions[zone[1]] = []
      regions[zone[1]].append(zone[0])

  return regions 


def get_zones():
  """Gets list of all zones from gcloud cli

  Returns:
    list of zones from gcloud cli
  """

  # call gcloud command
  p = subprocess.Popen(['gcloud', 'compute', 'zones', 'list'],
                       stdout=subprocess.PIPE)

  zone_str = p.communicate()[0]
  # remove header line of response
  zone_str = zone_str.split('\n', 1)[-1]
  zone_list = []
  for line in zone_str.splitlines():
    zone_list.append(line.split())

  return zone_list


def us_zones():
  all_zones = get_zones()


def add_args(parser):

  parser.add_argument('--pkb_path', default="pkb.py",
                      type=str, help="file path of ./pkb.py")

  parser.add_argument('--all_zone_intraregion', type=str2bool, nargs='?',
                      const=True, default=False, 
                      help='If set, runs tests between all zones in each region.'
                      'This flag overrides --zone_list')
  parser.add_argument('--zone_list',
                      type=str, help="comma delimited list of zones to test. ")
  parser.add_argument('--benchmarks', default='iperf',
                      type=str, help="comma delimited list of benchmarks to run. " 
                      "Supported benchmarks include iperf, netperf, iperf_vpn, ping")

  parser.add_argument('-m', '--machine_type', default='n1-standard-1',
                      type=str, help="machine type to test on")

  # iperf (not VPN) arguments
  parser.add_argument('--iperf_sending_thread_count', 
                      default=1, type=int,
                      help='Number of sending threads to use for iperf benchmark')
  parser.add_argument('--iperf_runtime_in_seconds',
                      default=60, type=int,
                      help='amount of time to run iperf')

  #VPN arguments
  # parser.add_argument('--use_vpn', type=str2bool, nargs='?',
  #   const=True, default=False, help='boolean to use a vpn')
  parser.add_argument('--iperf_vpn_sending_thread_count',
                      default=1, type=int,
                      help='Number of sending threads'
                      ' to use for iperf_vpn benchmark')
  parser.add_argument('--iperf_vpn_runtime_in_seconds',
                      default=60, type=int,
                      help='amount of time to run iperf')
  parser.add_argument('--tunnel_count',
                      type=int, default=1,
                      help='Number of vpn tunnels to use for'
                      ' iperf_vpn benchmark')

  # docker arguments
  parser.add_argument('--docker_to_cloud', type=str2bool, nargs='?',
                      const=True, default=False,
                      help='boolean to test between docker instance on'
                      'local host and zones specified in zone_list on cloud')

  # TCP window arguments
  parser.add_argument('--tcp_window_size_in_mb', type=float,
                      help='tcp window size in MB')
  parser.add_argument('--automate_window_size', type=str2bool, nargs='?',
                      const=True, default=False,
                      help='automatically chooses the best window size'
                      ' based off ping time. If this option is used, it will'
                      ' ignore --tcp_window_size_in_mb flag')

  # Bigquery arguments
  parser.add_argument('--bq_path', type=str,
                      help='Path to the "bq" executable')
  parser.add_argument('--bq_project', type=str,
                      help='Project to use for authenticating with BigQuery.')
  parser.add_argument('--bigquery_table', type=str,
                      help='The BigQuery table to publish results to.'
                      ' This should be of the form '
                      '"[project_id:]dataset_name.table_name".')
  parser.add_argument('--service_account', type=str,
                      help='Service account to use to authenticate with BQ.')
  parser.add_argument('--service_account_private_key', type=str,
                      help='Service private key for authenticating with BQ.')


def str2bool(v):
  if v.lower() in ('yes', 'true', 't', 'y', '1'):
    return True
  elif v.lower() in ('no', 'false', 'f', 'n', '0'):
    return False
  else:
    raise argparse.ArgumentTypeError('Boolean value expected.')


if __name__ == "__main__":
  main()


# --bigquery_table=cloud_testing_data.testing_1 --bq_project=api-project-352680429781

# --bigquery_table=interregion_tests.iperf --bq_project=cloud-network-performance-pke

# us-east1-b
#  [2] us-east1-c
#  [3] us-east1-d
#  [4] us-east4-c
#  [5] us-east4-b
#  [6] us-east4-a
#  [7] us-central1-c
#  [8] us-central1-a
#  [9] us-central1-f
#  [10] us-central1-b
#  [11] us-west1-b
#  [12] us-west1-c
#  [13] us-west1-a
